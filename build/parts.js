/* Generated by Babel */
//General sprite size
'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WIDTH = 50;
var HEIGHT = 50;

var Pipe = (function (_Phaser$Sprite) {
    _inherits(Pipe, _Phaser$Sprite);

    function Pipe(x, y, state, sprite, draggable) {
        _classCallCheck(this, Pipe);

        _get(Object.getPrototypeOf(Pipe.prototype), 'constructor', this).call(this, game, x, y, sprite);
        this.w = WIDTH;
        this.h = HEIGHT;
        this.state = state;

        this.animations.add('on', [1, 2], 10, true);

        this.isConnectedSource = false;
        this.isConnectedSink = false;
        //game.add.existing(this);

        //Drag functions
        this.inputEnabled = true;
        if (draggable) this.input.enableDrag();
        this.input.enableSnap(WIDTH, HEIGHT, false, true);
        this.events.onDragStop.add(state.updateConnection, state);

        //Keep pipe count
        this.id = state.pipeCount;
        state.pipeCount++;
    }

    return Pipe;
})(Phaser.Sprite);

var Mill = (function (_Phaser$Sprite2) {
    _inherits(Mill, _Phaser$Sprite2);

    function Mill(x, y, state) {
        _classCallCheck(this, Mill);

        _get(Object.getPrototypeOf(Mill.prototype), 'constructor', this).call(this, game, x, y, 'mill');
        this.w = WIDTH * 2;
        this.h = HEIGHT * 2;
        this.state = state;
        this.maxSpeed = 40;

        this.animations.add('on', [0, 1, 2, 3], this.maxSpeed, true);

        this.isConnectedSource = false;
        this.isConnectedSink = false;

        //Drag functions
        this.inputEnabled = true;
        this.input.enableDrag();
        this.input.enableSnap(WIDTH / 2, HEIGHT / 2, false, true);
        this.events.onDragStop.add(state.updateConnection, state);

        //Keep pipe count
        this.id = state.pipeCount;
        state.pipeCount++;
    }

    return Mill;
})(Phaser.Sprite);

var Pump = (function (_Phaser$Sprite3) {
    _inherits(Pump, _Phaser$Sprite3);

    function Pump(x, y, state) {
        _classCallCheck(this, Pump);

        _get(Object.getPrototypeOf(Pump.prototype), 'constructor', this).call(this, game, x, y, 'pump');
        this.w = WIDTH * 2;
        this.h = HEIGHT * 2;
        this.state = state;

        this.animations.add('on', [0, 1, 2, 3], 10, true);

        //drag resize
        this.inputEnabled = true;
        this.events.onDragStart.add(onDragStart, this);

        this.isConnectedSource = false;
        this.isConnectedSink = false;
    }

    return Pump;
})(Phaser.Sprite);

var Resistor = (function (_Phaser$Sprite4) {
    _inherits(Resistor, _Phaser$Sprite4);

    function Resistor(x, y, state, sprite, resistance) {
        _classCallCheck(this, Resistor);

        _get(Object.getPrototypeOf(Resistor.prototype), 'constructor', this).call(this, game, x, y, sprite);
        this.w = WIDTH;
        this.h = HEIGHT;
        this.state = state;
        this.resistance = resistance;

        this.animations.add('on', [1, 2], 20, true);

        this.isConnectedSource = false;
        this.isConnectedSink = false;

        //Drag functions
        this.inputEnabled = true;
        this.input.enableDrag();
        this.input.enableSnap(WIDTH, HEIGHT, false, true);
        this.events.onDragStop.add(state.updateConnection, state);

        //Keep pipe count
        this.id = state.pipeCount;
        state.pipeCount++;
    }

    return Resistor;
})(Phaser.Sprite);

function onDragStart(sprite, pointer) {
    console.log(pointer.x);
}

var Source = (function (_Phaser$Sprite5) {
    _inherits(Source, _Phaser$Sprite5);

    function Source(x, y, state) {
        _classCallCheck(this, Source);

        _get(Object.getPrototypeOf(Source.prototype), 'constructor', this).call(this, game, x, y, 'source');
        this.w = WIDTH * 2;
        this.h = HEIGHT;
        this.isConnectedSource = true;
        this.isConnectedSink = false;
        //game.add.existing(this);
        //this.inputEnabled = true;
        //this.input.enableDrag();
        //this.events.onDragStop.add(updateConnection, this);

        //Assuming only one source
        this.id = 0;
        //state.g.setNode("0", this);
    }

    return Source;
})(Phaser.Sprite);

var Sink = (function (_Phaser$Sprite6) {
    _inherits(Sink, _Phaser$Sprite6);

    function Sink(x, y, state) {
        _classCallCheck(this, Sink);

        _get(Object.getPrototypeOf(Sink.prototype), 'constructor', this).call(this, game, x, y, 'sink');
        this.w = WIDTH * 2;
        this.h = HEIGHT;
        this.isConnectedSource = false;
        this.isConnectedSink = true;
        //game.add.existing(this);
        //this.inputEnabled = true;
        //this.input.enableDrag();
        //this.events.onDragStop.add(updateConnection, this);

        //Assuming only one source
        this.id = 1;
        //state.g.setNode("1", this);
    }

    //END CLASSES

    return Sink;
})(Phaser.Sprite);

function checkResistance(state) {
    //If pipes connected, check if resistor is in circuit
    var pipes = state.pipes;
    var circuit = graphlib.alg.preorder(state.g, "0");
    var resistance = 0;

    for (var i in circuit) {
        var k = circuit[i];
        if (pipes[k].key == 'resistor') resistance = pipes[k].resistance;
    }
    console.log(resistance);
    return resistance;
}

function setCurrent(state, resistance) {
    //Dictates how fast the wheel spinss
    var pipes = state.pipes;
    pipes[2].animations.currentAnim.speed = pipes[2].maxSpeed - resistance;
}

function animatePipes(state) {
    var pipes = state.pipes;
    //Check if resistor in circuit
    var resistance = checkResistance(state);
    setCurrent(state, resistance);
    for (var i in pipes) {
        //I only have animation files for 2 types
        if (pipes[i].key == 'pipe' || pipes[i].key == 'pipeh' || pipes[i].key == 'mill' || pipes[i].key == 'resistor') {
            //if connected to source
            if (pipes[i].isConnectedSource) pipes[i].animations.play('on');
        }
    }
    state.pump.animations.play('on');
}

function stopAnimate(state) {
    var pipes = state.pipes;
    for (var i in pipes) {
        //I only have animation files for 2 types
        if (pipes[i].key == 'pipe' || pipes[i].key == 'pipeh' || pipes[i].key == 'mill' || pipes[i].key == 'resistor') {
            //if connected to source
            pipes[i].animations.stop();
            //Sets to no water marks
            pipes[i].frame = 0;
        }
    }
    state.pump.animations.stop();
}

function makePipes(state) {
    var pipes = state.pipes;

    pipes[0] = new Source(50, 200, state);
    pipes[1] = new Sink(50, 250, state);
    //  Make pipe

    pipes[2] = new Mill(400, 300, state);
    pipes[3] = new Pipe(100, 300, state, 'elbow4', false);
    pipes[4] = new Pipe(150, 300, state, 'pipeh', false);
    pipes[5] = new Pipe(200, 400, state, 'pipeh', true);
    pipes[6] = new Pipe(250, 300, state, 'elbow3', false);
    pipes[7] = new Pipe(250, 150, state, 'elbow2', false);
    pipes[8] = new Pipe(100, 150, state, 'elbow1', false);
    pipes[9] = new Pipe(200, 150, state, 'pipeh', false);
    pipes[10] = new Pipe(150, 150, state, 'pipeh', false);
    pipes[11] = new Resistor(50, 50, state, 'resistor', 30);

    state.pump = new Pump(75, 200, state);
}

function addPipes(state) {
    //Addes pipe to graph and to game
    var pipes = state.pipes;

    for (var i in pipes) {
        state.add.existing(pipes[i]);
        state.g.setNode('' + pipes[i].id, pipes[i]);
    }
    state.add.existing(state.pump);
}