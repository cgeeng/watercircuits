/* Generated by Babel */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Level0 = (function (_Play) {
    _inherits(Level0, _Play);

    function Level0() {
        _classCallCheck(this, Level0);

        _get(Object.getPrototypeOf(Level0.prototype), 'constructor', this).call(this);
    }

    _createClass(Level0, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');
            this.add.sprite(0, 0, 'overlay');

            //buttons
            this.exit = this.add.sprite(10, 10, 'exit');
            this.exit.inputEnabled = true;
            this.exit.input.useHandCursor = true;
            this.exit.events.onInputUp.add(this.back, this);

            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.setToolbox();
            this.initEdges();

            //CIRCUIT OVERLAY
            this.circuitButton = this.add.sprite(546, 455, 'circuitButton');
            this.circuitButton.inputEnabled = true;
            this.circuitButton.input.useHandCursor = true;
            this.circuitButton.events.onInputDown.add(this.toggleCircuit, this);
            this.white = this.add.sprite(0, 0, 'white');
            this.circuit = this.add.sprite(0, 0, 'circuit');
            this.math = this.add.sprite(0, 0, 'math');
            this.white.alpha = 0;
            this.circuit.alpha = 0;
            this.math.alpha = 0;
        }
    }, {
        key: 'setToolbox',
        value: function setToolbox() {
            var draggable = new Pipe(200, 425, this, 'pipeh', true);
            draggable.input.useHandCursor = true;
            addToState(this, draggable);
        }
    }]);

    return Level0;
})(Play);

var Level2 = (function (_Play2) {
    _inherits(Level2, _Play2);

    function Level2() {
        _classCallCheck(this, Level2);

        _get(Object.getPrototypeOf(Level2.prototype), 'constructor', this).call(this);
    }

    _createClass(Level2, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');

            //ROBOT STUFF
            this.robot = new Robot(0, 0, this);
            this.add.existing(this.robot);
            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.createCircuit();
            this.setToolbox();
            this.createButtons();
            this.initEdges();

            //CIRCUIT OVERLAY
            this.circuitButton = this.add.sprite(546, 455, 'circuitButton');
            this.circuitButton.inputEnabled = true;
            this.circuitButton.input.useHandCursor = true;
            this.circuitButton.events.onInputDown.add(this.toggleCircuit, this);
            this.white = this.add.sprite(0, 0, 'white');
            this.circuit = this.add.sprite(0, 0, 'circuit');
            this.math = this.add.sprite(0, 0, 'math');
            this.white.alpha = 0;
            this.circuit.alpha = 0;
            this.math.alpha = 0;
        }
    }, {
        key: 'createCircuit',
        value: function createCircuit() {
            this.add.sprite(0, 0, 'cover1');
            this.createBattery();
        }
    }, {
        key: 'createBattery',
        value: function createBattery() {
            game.add.button(150, 250, 'arrow', this.actionOnClick, this, 0, 0, 0);
            game.add.button(50, 250, 'arrow', this.actionOnClick, this, 0, 0, 0);
        }
    }, {
        key: 'actionOnClick',
        value: function actionOnClick() {
            console.log("hi");
        }
    }]);

    return Level2;
})(Play);