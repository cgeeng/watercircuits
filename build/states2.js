/* Generated by Babel */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Level0 = (function (_Play) {
    _inherits(Level0, _Play);

    function Level0() {
        _classCallCheck(this, Level0);

        _get(Object.getPrototypeOf(Level0.prototype), 'constructor', this).call(this);
    }

    _createClass(Level0, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');
            this.add.sprite(0, 0, 'overlay');

            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.setToolbox();
            this.createButtons();
            this.initEdges();

            this.upArrow;
            this.downArrow;

            this.createConditions();
            this.targetCurrent = 2; //amperes
        }
    }, {
        key: 'setToolbox',
        value: function setToolbox() {
            var draggable = new Pipe(200, 425, this, 'pipeh', true);
            draggable.input.useHandCursor = true;
            addToState(this, draggable);
        }
    }]);

    return Level0;
})(Play);

var Level2 = (function (_Play2) {
    _inherits(Level2, _Play2);

    function Level2() {
        _classCallCheck(this, Level2);

        _get(Object.getPrototypeOf(Level2.prototype), 'constructor', this).call(this);
    }

    _createClass(Level2, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');

            //ROBOT STUFF
            this.robot = new Robot(0, 0, this);
            this.add.existing(this.robot);
            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.createCircuit();
            this.setToolbox();
            this.createButtons();
            this.initEdges();

            this.upArrow;
            this.downArrow;

            this.createConditions();
            this.targetCurrent = 2; //amperes
        }
    }, {
        key: 'createCircuit',
        value: function createCircuit() {
            this.add.sprite(0, 0, 'cover1');
            this.createBattery();
        }
    }, {
        key: 'createBattery',
        value: function createBattery() {
            this.voltageLabel = new displayText(this.game, 30, 210, "Voltage:");
            this.voltageText = new displayText(this.game, 50, 230, this.pump.voltage + "V");
        }
    }]);

    return Level2;
})(Play);

var Level3 = (function (_Level2) {
    _inherits(Level3, _Level2);

    function Level3() {
        _classCallCheck(this, Level3);

        _get(Object.getPrototypeOf(Level3.prototype), 'constructor', this).call(this);
    }

    _createClass(Level3, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');

            //ROBOT STUFF
            this.robot = new Robot(0, 0, this);
            this.add.existing(this.robot);
            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.createCircuit();
            this.setToolbox();
            this.createButtons();
            this.initEdges();

            this.upArrow;
            this.downArrow;

            this.createConditions();
            this.targetCurrent = 2; //amperes
        }
    }, {
        key: 'createCircuit',
        value: function createCircuit() {
            this.add.sprite(0, 0, 'cover2');
            this.createBattery();
        }
    }, {
        key: 'setToolbox',
        value: function setToolbox() {
            this.add.sprite(0, 0, 'overlay');
            var draggable = new Pipe(40, 425, this, 'pipeh', true);
            draggable.input.useHandCursor = true;
            addToState(this, draggable);
            this.resistor1 = new Resistor(140, 450, this, 'circuitResistor', 20);
            addToState(this, this.resistor1);
            this.resistor2 = new Resistor(300, 450, this, 'circuitResistor', 50);
            addToState(this, this.resistor2);
            this.createResistor();
        }
    }, {
        key: 'createResistor',
        value: function createResistor() {
            this.resistorLabel1 = new displayText(this.game, this.resistor1.x - 20, this.resistor1.y - 30, "Resistance:");
            this.resistorText1 = new displayText(this.game, this.resistor1.x, this.resistor1.y - 10, this.resistor1.resistance + "Ohms");

            this.resistorLabel2 = new displayText(this.game, this.resistor2.x - 20, this.resistor2.y - 30, "Resistance:");
            this.resistorText2 = new displayText(this.game, this.resistor2.x, this.resistor2.y - 10, this.resistor2.resistance + 100 + "Ohms");
        }
    }]);

    return Level3;
})(Level2);

var Level4 = (function (_Level3) {
    _inherits(Level4, _Level3);

    function Level4() {
        _classCallCheck(this, Level4);

        _get(Object.getPrototypeOf(Level4.prototype), 'constructor', this).call(this);
    }

    _createClass(Level4, [{
        key: 'create',
        value: function create() {
            //prevents popup on right click
            game.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };
            this.add.sprite(0, 0, 'sky');

            //ROBOT STUFF
            this.robot = new Robot(0, 0, this);
            this.add.existing(this.robot);
            //make an UNDIRECTED GRAAAAAPH!!!!
            this.g = new graphlib.Graph({ directed: false }); //{ directed: false}
            this.pipeCount = 2; //accounts for source and sink; 0 = source, 1 = sink 

            this.pipes = [];
            //this holds the weird pump
            this.pump;
            this.mill;
            makePipes(this);

            //this.text = this.add.text(0, 0, "are the pipes fudgin connected", {fill: "#ff0044"});
            addPipes(this);
            this.createCircuit();
            this.setToolbox();
            this.createButtons();
            this.createLED();
            this.initEdges();

            this.upArrow;
            this.downArrow;

            this.createConditions();
            this.targetCurrent = 2; //amperes
        }
    }, {
        key: 'createCircuit',
        value: function createCircuit() {
            this.add.sprite(0, 0, 'cover3');
            this.createBattery();
        }
    }, {
        key: 'createLED',
        value: function createLED() {
            this.LEDLabel = new displayText(this.game, 400, 220, "Max Current: 15amps");
            this.LEDText = new displayText(this.game, 500, 290, "0amps");
        }
    }]);

    return Level4;
})(Level3);